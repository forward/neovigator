import( '/js/pjs/Tween.lib' );
import( '/js/pjs/util.lib' );

color[] defaultColors = new color[12];
defaultColors[0] = color(171, 199, 49);
defaultColors[1] = color(162, 195, 85);
defaultColors[2] = color(154, 191, 123);
defaultColors[3] = color(147, 186, 161);
defaultColors[4] = color(141, 181, 200);
defaultColors[5] = color(134, 162, 169);
defaultColors[6] = color(128, 142, 137);
defaultColors[7] = color(122, 122, 104);
defaultColors[8] = color(177, 102, 73);
defaultColors[9] = color(131, 127, 67);
defaultColors[10] = color(144, 150, 60);
defaultColors[11] = color(157, 175, 55);

color[] dbColors = new color[12];
dbColors[0] = color(255, 0, 0);
dbColors[1] = color(255, 0, 64);
dbColors[2] = color(255, 0, 128);
dbColors[3] = color(255, 0, 255);
dbColors[4] = color(128, 0, 0);
dbColors[5] = color(128, 0, 64);
dbColors[6] = color(128, 0, 128);
dbColors[7] = color(128, 0, 255);
dbColors[8] = color(0,   0, 0);
dbColors[9] = color(0,   0, 64);
dbColors[10] = color(0,  0, 128);
dbColors[11] = color(0,  0, 255);

color[] webColors = new color[12];
webColors[0] = color(0, 255, 0);
webColors[1] = color(0, 255, 64);
webColors[2] = color(0, 255, 128);
webColors[3] = color(0, 255, 255);
webColors[4] = color(0, 128, 0);
webColors[5] = color(0, 128, 64);
webColors[6] = color(0, 128, 128);
webColors[7] = color(0, 128, 255);
webColors[8] = color(0,   0, 0);
webColors[9] = color(0,   0, 64);
webColors[10] = color(0,  0, 128);
webColors[11] = color(0,  0, 255);

color[] appColors = new color[12];
appColors[0] = color(255, 255, 0);
appColors[1] = color(255, 255, 64);
appColors[2] = color(255, 255, 128);
appColors[3] = color(255, 255, 255);
appColors[4] = color(128, 128, 0);
appColors[5] = color(128, 128, 64);
appColors[6] = color(128, 128, 128);
appColors[7] = color(128, 128, 255);
appColors[8] = color(0,   0, 0);
appColors[9] = color(0,   0, 64);
appColors[10] = color(0,  0, 128);
appColors[11] = color(0,  0, 255);

color[] lbColors = new color[12];
lbColors[0] = color(0, 255, 255);
lbColors[1] = color(64, 255, 255);
lbColors[2] = color(128, 255, 255);
lbColors[3] = color(255, 255, 255);
lbColors[4] = color(0, 128, 255);
lbColors[5] = color(64, 128, 255);
lbColors[6] = color(128, 128, 255);
lbColors[7] = color(255, 128, 255);
lbColors[8] = color(0,   0,   255);
lbColors[9] = color(64,   0,   255);
lbColors[10] = color(128,  0,   255);
lbColors[11] = color(255,  0,   255);

color[] internetColors = new color[12];
internetColors[0] = color(128, 0, 64);



void coloursFor(String type) {
  if (type == "web") {
    return webColors;
  } else if (type == "app") {
    return appColors;
  } else if (type == "lb") {
    return lbColors;
  } else if (type == "db") {
    return dbColors;
  } else if (type == "internet") {
    return dbColors;
  } else {
    return defaultColors;
  }
}

color LABEL_COLOR = color(150);
color HIGHLIGHTED_LABEL_COLOR = color(55);
color DONUT_BACKGROUND = color(255);
color BACKGROUND = color(234,239,224);

// global constants
float STROKE_WEIGHT_COLLAPSED = 50;
float STROKE_WEIGHT_EXPANDED = 60;
float OUTER_BORDER = 5;

float RADIUS_OPENED = 110;
float RADIUS_CLOSED = 50;


PFont defaultFont = loadFont("/fonts/GraublauWeb-Regular.svg");

int fontSize = 11.3;
int fontSizeCaption = 16;

int nodeCount = 0;

Resource fetchResource(String resourceId) {
  // init dummy resource
  Resource resource = new Resource(resourceId, "", "");
	nodeCount++;
	resource.idx = nodeCount;
  resource.fetchData(); // start fetching data from freebase
	return resource;
}

Graph g;
Resource r;

int selectedEdgeIndex = null;

void resize() {
	size(window.innerWidth-10, window.innerHeight-15);
}

void setup() {	
	myGraph = g = new Graph();
	// myGraph exposes the graph to the outside world
	textFont(defaultFont, fontSize);
  nodeCount = 0;
  resize();
  fill(0);
  smooth();
  frameRate(30);
	background(BACKGROUND);

	if (resourceId) {
		r = fetchResource(resourceId);
		g.addNode(root = new Node(r));
		g.selectedNode = root;
		$('#details').html(r.html);
	}
}

void draw() {
  if (g.nodes.size()>0) {
    g.tick();
    background(BACKGROUND);
    g.draw();
  }
}

void mouseMoved() {
	if (!resourceId) return;
	
	if (!g.isDragging()) {
		Resource r = g.selectedNode.subject;
		r.checkSelected();
		    
    g.checkSelected(); // checkDragged
  
		selectedEdgeIndex = null;
		// Iterate over nodes
		for (int i=0; i< g.edges.size(); i++) {
			if (g.edges[i].mouseOver()) {
				selectedEdgeIndex = i;
			}
		}
	}
}





void addNode(Value val) {
  Resource r = g.selectedNode.subject;
	Node n = g.getNodeById(val.getId());
	
	// close current resource
	r.setClosed();
  
  DonutSegment seg = r.donut.selectedSegment;

  if (!n) { // not found
    Resource r2 = fetchResource(val.getId());
		g.addNode(newNode = new Node(r2));
		g.addEdge(new Edge(g.selectedNode, newNode, seg));
		g.setSelectedNode(newNode);
	} else {
		g.addEdge(new Edge(g.selectedNode, n, seg));
		g.setSelectedNode(n);
		g.selectedNode.subject.setOpen();
	}
}





void mousePressed() {
  
  // ->> g.checkSelected()
  // g.checkSelected(); // updates g.selectedNode if necessary
  
  if (g.dragNode!==g.selectedNode && g.dragNode!=null) {
    g.selectNode(g.dragNode);
    
    return; // that's all
  }

  Resource r = g.selectedNode.subject;

	if (!resourceId) return;
  if (mouseButton == LEFT) {
		Resource r = g.selectedNode.subject;
		Value selectedValue = r.getSelectedValue();
		
		if (selectedValue !== null && selectedValue.hovering) {
		  addNode(selectedValue);
		} else if (g.selectedNode != null) {
		  g.dragging = true;
		}
  } else { // Right click
		// removes resource from graph
		Resource r = g.selectedNode.subject;
		g.removeNode(g.selectedNode);
		g.selectedNode = g.nodes[0];
	}
}


void mouseReleased() {
  g.dragging = false;
}

void mouseDragged() {
  if (g.getDragNode() != null) {
    g.getDragNode().setPos(mouseX, mouseY, 0);
  }
}